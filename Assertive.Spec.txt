# Noundry.Assertive Project Structure and Specification

## Current Project Structure
```
Noundry.Assertive/
├── src/
│   └── Noundry.Assertive/
│       ├── Noundry.Assertive.csproj
│       └── Assertive.cs
├── tests/
│   └── Noundry.Assertive.Tests/
│       ├── Noundry.Assertive.Tests.csproj
│       └── AssertiveTests.cs
├── examples/
│   └── Noundry.Assertive.Examples/
│       ├── Noundry.Assertive.Examples.csproj
│       └── Program.cs
├── README.md
├── LICENSE
└── Noundry.Assertive.sln
```

## NuGet Package Configuration (Binary Distribution)

### Package Metadata (from Noundry.Assertive.csproj)
```xml
<PackageId>Noundry.Assertive</PackageId>
<PackageVersion>1.0.0</PackageVersion>
<Authors>Noundry</Authors>
<Description>A simple, fluent, and expressive assertion library for .NET. Zero dependencies, maximum readability.</Description>
<PackageLicenseExpression>MIT</PackageLicenseExpression>
<PackageProjectUrl>https://github.com/noundry/Noundry.Assertive</PackageProjectUrl>
<RepositoryUrl>https://github.com/noundry/Noundry.Assertive.git</RepositoryUrl>
<RepositoryType>git</RepositoryType>
<PackageTags>assert fluent testing validation csharp dotnet assertions unit-testing</PackageTags>
```

## Usage Examples

### Basic Usage
```csharp
using Noundry.Assertive;

// String assertions
"Hello, World!"
    .Assert()
    .IsNotNull()
    .IsOfType<string>()
    .IsEqualTo("Hello, World!")
    .Satisfies(s => s.Length > 5, "String should be longer than 5 characters");

// Numeric assertions
42.Assert()
    .IsNotNull()
    .IsEqualTo(42)
    .IsOfType<int>()
    .IsInRange(1, 100)
    .Satisfies(x => x > 0, "Number should be positive")
    .Fails(x => x < 0, "Number should not be negative");

// Collection assertions
var numbers = new List<int> { 1, 2, 3, 4, 5 };
numbers.Assert()
    .IsNotEmpty<int>()
    .HasCount<int>(5)
    .Contains(3)
    .DoesNotContain(10);

// Null handling
string nullValue = null;
nullValue.Assert().IsNull();

string notNull = "value";
notNull.Assert().IsNotNull();
```

### Error Handling
```csharp
using Noundry.Assertive;

try
{
    "Assertive"
        .Assert()
        .WithContext("Demo failure")
        .IsEqualTo("Different String"); // This will fail
}
catch (AssertionException ex)
{
    Console.WriteLine($"Message: {ex.Message}");
    Console.WriteLine($"Expected: {ex.Expected}");
    Console.WriteLine($"Actual: {ex.Actual}");
}
```

## Build and Deployment

### Build Commands
```bash
# Clean build
dotnet clean

# Restore dependencies
dotnet restore

# Build solution
dotnet build --configuration Release

# Run tests
dotnet test --configuration Release

# Run examples
dotnet run --project examples/Noundry.Assertive.Examples --configuration Release
```

### Package Deployment
```bash
# The package is automatically generated during build
# Location: src/Noundry.Assertive/bin/Release/Noundry.Assertive.1.0.0.nupkg

# Deploy to NuGet.org
dotnet nuget push src/Noundry.Assertive/bin/Release/Noundry.Assertive.1.0.0.nupkg --api-key YOUR_API_KEY --source https://api.nuget.org/v3/index.json

# Deploy symbols package
dotnet nuget push src/Noundry.Assertive/bin/Release/Noundry.Assertive.1.0.0.snupkg --api-key YOUR_API_KEY --source https://api.nuget.org/v3/index.json
```

## Core API Implementation

The library provides a fluent assertion API through:

1. **Extension Method**: `Assert<T>(this T value)` - Entry point for all assertions
2. **Fluent Class**: `Assertive<T>` - Chainable assertion methods
3. **Exception Type**: `AssertionException` - Thrown when assertions fail

### Available Assertions
- `IsNotNull()` / `IsNull()` - Null checks
- `IsEqualTo(T)` / `IsNotEqualTo(T)` - Value equality
- `IsOfType<U>()` / `IsNotOfType<U>()` - Type checks
- `Satisfies(Func<T, bool>, string)` - Custom predicates
- `Fails(Func<T, bool>, string)` - Inverse predicates
- `IsInRange(T, T)` - Range validation (for IComparable<T>)
- `Contains<TItem>(TItem)` / `DoesNotContain<TItem>(TItem)` - Collection membership
- `IsEmpty<TItem>()` / `IsNotEmpty<TItem>()` - Collection emptiness
- `HasCount<TItem>(int)` - Collection size
- `WithContext(string)` - Add context to error messages

## Package Features
- **Zero Runtime Dependencies**: Clean integration
- **Fluent API**: Chainable, readable assertions  
- **Comprehensive Coverage**: All common assertion scenarios
- **Rich Error Messages**: Clear failure descriptions with context
- **High Performance**: Compiled binary distribution
- **Strong Typing**: Full generic type support
- **Framework Agnostic**: Works with xUnit, NUnit, MSTest, etc.

## Target Framework
- .NET 9.0 (latest)
- Compatible with all .NET implementations supporting this version